const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require('path')
const Informations = require('../models/InformationsModel')
const Restaurant   = require('../models/RestaurantModel')
const Invoice      = require('../models/InvoiceModel')

async function createInvoice(invoice, path, invoiceId, restaurantId, email, callback) {

    let doc = new PDFDocument({ size: "A4", margin: 50 });
    const writeStream = fs.createWriteStream('public/invoices/' + path);
    const restaurant = await Restaurant.findById(restaurantId).exec()
    const informations = await Informations.findOne({RestaurantId: restaurantId}).exec()
    let currency = ''
    switch(informations.currency) {
	case 'EUR':
		currency = '€'
		break
	case 'USD':
		currency = '$'
		break
	case 'HUF':
		currency = 'Ft'
		break
    }

    await generateHeader(doc, invoiceId, restaurantId, restaurant, informations);
    generateInvoiceTable(doc, invoice, 1, currency)
    generateFooter(doc);

    await Invoice.create({email: email, RestaurantId: restaurantId, invoiceName: path, date: new Date().toISOString()})

    doc.on('end', async() => {
        await callback()
    })

    doc.end();
    doc.pipe(writeStream);
}

async function createMultiInvoice(invoice, path, invoiceId, restaurantId, email, peopleCount, callback) {
    let doc = new PDFDocument({ size: "A4", margin: 50 });

    console.log(peopleCount)
    const restaurant = await Restaurant.findById(restaurantId).exec()
    const informations = await Informations.findOne({RestaurantId: restaurantId}).exec()
    let currency = ''
    switch(informations.currency) {
	case 'EUR':
		currency = '€'
		break
	case 'USD':
		currency = '$'
		break
	case 'HUF':
		currency = 'Ft'
		break
    }

    for(let i = 0; i < peopleCount; ++i) {
        console.log('new page')
        await generateHeader(doc, invoiceId, restaurantId, restaurant, informations);
        generateInvoiceTable(doc, invoice, peopleCount, currency);
        generateFooter(doc);

        if(i !== peopleCount - 1)
            doc.addPage()
    }


    await Invoice.create({email: email, RestaurantId: restaurantId, invoiceName: path, date: new Date().toISOString()})

    doc.on('end', async() => {
	await callback()
    })

    doc.flushPages()
    doc.end();
    doc.pipe(fs.createWriteStream('public/invoices/' + path));

    return doc
}

async function generateHeader(doc, invoiceId, restaurantId, restaurant, informations) {
    doc.font("Helvetica");
    doc
        .fillColor("#444444")
        .fontSize(20)
        .text("", 110, 57)
        .fontSize(10)
        .text("Számla ID:", 50, 50)
        .text(invoiceId, 150, 50)
        .text("Dátum:", 50, 65)
        .text(formatDate(new Date()), 150, 65)
        .text(`${restaurant.restaurantName ?? ''}`, 200, 50, { align: "right" })
        .text(`${informations.address ?? ''}`, 200, 65, { align: "right" })
        .text(`${informations.postalCode ?? ''} ${informations.city ?? ''}`, 200, 80, { align: "right" })
        .moveDown();

    doc
        .fillColor("#444444")
        .fontSize(20)
        .text("Számla", 50, 160, {align: 'center'});
}

function generateInvoiceTable(doc, items, divisor=1, currency) {
    const invoiceTableTop = 230;

    doc.font("Helvetica-Bold");
    generateTableRow(
        doc,
        invoiceTableTop,
        "Rendelések",
        "Egységár",
        "Mennyiség",
        "Részösszeg",
        "Line Total"
    );
    generateHr(doc, invoiceTableTop + 20);
    doc.font("Helvetica");

    let i = 0;
    let offset = 0
    for (const item of items) {
        const position = invoiceTableTop + (i + 1) * 30 + offset;
        generateTableRow(
            doc,
            position,
            item.name,
            formatCurrency(item.price, currency),
            item.quantity,
            formatCurrency(item.quantity * item.price, currency)
        );
	if(item.name.length >= 65) {
		generateHr(doc, position + 30);
		offset += 10
	}else{
		generateHr(doc, position + 20);
	}
        i++
    }

    const subtotalPosition = invoiceTableTop + (i + 1) * 30 + offset;
    doc.font("Helvetica-Bold");
    generateTableRow(
        doc,
        subtotalPosition,
        "",
        "Összesen",
        "",
        formatCurrency((items.reduce((part, item) => part + item.price * item.quantity, 0)) / divisor, currency)
    );

}

function generateFooter(doc) {
    doc
        .fontSize(10)
        .text(
            "Invoice generated by Restify",
            50,
            660,
            { align: "center", width: 500 }
        );
}

function generateTableRow(
    doc,
    y,
    item,
    unitCost,
    quantity,
    lineTotal
) {
    doc
        .fontSize(10)
        .text(item, 50, y, {width: 290})
        .text(unitCost, 280, y, { width: 90, align: "right" })
        .text(quantity, 370, y, { width: 90, align: "right" })
        .text(lineTotal, 0, y, { align: "right" });
}

function generateHr(doc, y) {
    doc
        .strokeColor("#aaaaaa")
        .lineWidth(1)
        .moveTo(50, y)
        .lineTo(550, y)
        .stroke();
}

function formatCurrency(forints, currency) {
    if(currency === 'Ft')
    	return Number(forints).toFixed(0).toString() + ' ' + currency

    return Number(forints).toFixed(2).toString() + ' ' + currency
}

function formatDate(date) {
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();

    return year + "/" + month + "/" + day;
}

module.exports = {createInvoice, createMultiInvoice}
